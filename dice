#!/usr/bin/env node

var cmd = require("commander"),

	parseRoll = function(roll){
		var components = roll.split("+"),
			result = 0;
		for(var i = 0; i < components.length; i += 1){
			result += parseComponent(components[i]);
		}
		return result;
	},
	
	parseComponent = function(component){
		var result = 0, parsed;
		if(component.indexOf("d") !== -1){
			var dice = parseDiceComponent(component);
			rollList = rollSet(dice.rollCount, dice.sides);
			if(cmd.verbose) rollList.map(function(val){console.log("d" + dice.sides + ": " + val)});
			if(cmd.top) rollList = top(rollList, parseInt(cmd.top));
			if(cmd.stats){
				console.log("Average: " + (sum(rollList) / rollList.length));
				console.log("Standard Deviation: " + standardDeviation(rollList));
			}
			result += sum(rollList);
		}else{
			result += parseInt(component) || 0;
			if(cmd.verbose) console.log("Modifier: " + result);
		}
		return result;
	},

	parseDiceComponent = function(component){
		var tokens = component.split("d");
		if(tokens.length > 2){
			console.log("Error: Unparsable token: \"" + component + "\"");
			process.exit(1);
		}
		return {
			rollCount: parseInt(tokens[0]) || 1,
			sides: parseInt(tokens[1]) || 0
		};
	},

	rollSet = function(rollCount, sides){
		var result = [];
		for(var i = 0; i < rollCount; i += 1){
			result.push(rollDie(sides));
		}
		return result;
	},

	rollDie = function(sides){
		return Math.floor(Math.random() * (sides - 1) + 1);
	},

	sum = function(numberArray){
		if(numberArray.length === 0) return 0;
		return numberArray.reduce(function(a, b){return a + b;});
	},

	top = function(numberArray, topCount){
		numberArray.sort(function(a, b){
			if(a < b) return -1;
			if(a > b) return 1;
			return 0;
		});
		return numberArray.slice(numberArray.length - topCount, numberArray.length);
	},

	standardDeviation = function(numberArray){
		var mean = sum(numberArray) / numberArray.length,
			variance = sum(numberArray.map(function(val){
				return Math.pow(val - mean, 2);
			})) / numberArray.length;
		return Math.sqrt(variance);
	},

	invalidCommandAction = function(){
		console.log("You must use a valid command.\n\nUse -h for more info.");
	};

cmd
	.version("0.1.0")
	.option("-s, --stats", "Prints out statistical information about the roll.")
	.option("-t, --top [rolls]", "Only totals the highest n rolls in each component.")
	.option("-v, --verbose", "Shows each roll and modifier value.");

cmd
	.command("roll <roll>")
	.description("Rolls the specified dice with the given modifiers. (e.g. 1d6+2d12+5)")
	.action(function(roll){
		console.log("Result: " + parseRoll(roll));
	});

cmd
	.command("*")
	.action(invalidCommandAction);

cmd.parse(process.argv);

if(process.argv[process.argv.length - 1].indexOf("rcon") !== -1){
	invalidCommandAction();
}
